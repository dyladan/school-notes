#+TITLE: CSE 361 HW-3
#+OPTIONS: toc:nil
#+LATEX_HEADER: \usepackage{geometry,listings,amsmath,amssymb,amsthm}
#+LATEX_CLASS_OPTIONS: [12pt]
#+STARTUP: showall

* Problem Statement

Given a list of integers, return the 3 elements that produce the
largest product.

* Code

#+BEGIN_SRC python
  def read_dat(fname):
      with open(fname) as f:
          for l in f.readlines():
              yield([int(s.strip()) for s in l.split(',')])

  def max_3prod(a):
      n = len(a)
      if n < 3:
          return
      ml = a[:3]
      m = a[0] * a[1] * a[2]
      for i in range(n-2):
          for j in range(i+1, n-1):
              for k in range(j+1, n):
                  t = m
                  m = max(m, a[i] * a[j] * a[k])
                  if m > t:
                      ml = [a[i], a[j], a[k]]
      return ml, m


  s = 0
  for i in read_dat('sum-of-k.data'):
      lst, p = max_3prod(i)
      s += p
      print '[' + " ".join(str(i) for i in lst) + ']  ->', p

  print "TOTAL:", s

#+END_SRC

* Output

#+BEGIN_LaTeX
\begin{verbatim}
[1 2 3]  -> 6
[-1 -2 -3]  -> -6
[2 3 4]  -> 24
[2 3 4]  -> 24
[1 3 4]  -> 12
[1 2 4]  -> 8
[1 2 3]  -> 6
[-1 -2 4]  -> 8
[-1 -3 4]  -> 12
[-1 3 -4]  -> 12
[-2 -3 4]  -> 24
[-2 3 -4]  -> 24
[2 -3 -4]  -> 24
[-1 -2 -3]  -> -6
[1 -3 -4]  -> 12
[2 -3 -4]  -> 24
[-2 3 -4]  -> 24
[-2 -3 4]  -> 24
[3 4 5]  -> 60
[-1 -2 -3]  -> -6
[2 -4 -5]  -> 40
[3 4 5]  -> 60
[-2 -3 5]  -> 30
[-2 -4 5]  -> 40
[-3 4 -5]  -> 60
[2 3 4]  -> 24
[3 4 5]  -> 60
[-3 -4 5]  -> 60
[1 -4 -5]  -> 20
[5 6 7]  -> 210
[2 3 4]  -> 24
[2 3 4]  -> 24
[-2 -3 4]  -> 24
[2 -3 -4]  -> 24
[-1 -2 2]  -> 4
[-1 -2 1]  -> 2
[-1 -2 0]  -> 0
[-2 3 -3]  -> 18
[2 -4 -3]  -> 24
[0 -1 -2]  -> 0
[1 -2 -3]  -> 6
[-1 -2 3]  -> 6
TOTAL: 1070
\end{verbatim}
#+END_LaTeX

* Correctness

The algorithm terminates because each of the 3 for loops have
pre-defined bounds.

