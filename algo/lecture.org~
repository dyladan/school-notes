#+TITLE: CSE 361 Lecture Notes
#+OPTIONS: toc:nil
#+LATEX_HEADER: \usepackage{geometry,listings,amsmath,amssymb,amsthm}
#+LATEX_CLASS_OPTIONS: [12pt]
#+STARTUP: showall

* Sums

** Sum of constant

#+BEGIN_LaTeX
\begin{align}
\sum_{i=k}^n c &= c + c + c + c + ... + c \\
&= n - k + 1
\end{align}
#+END_LaTeX

** Sum of integers

#+BEGIN_LaTeX
\begin{align}
\sum_{i=0}^n i &= 0 + 1 + 2 + 3 + ... + n \\
&= \frac{n(n+1)}{2}
\end{align}
#+END_LaTeX

** Sum of squares

#+BEGIN_LaTeX
\begin{align}
\sum_{i=0}^n i^2 &= 0 + 1 + 4 + 9 + ... + n^2 \\
&= \frac{n(n+1)(2n+1)}{3}
\end{align}
#+END_LaTeX


* Complexity

- Big Theta has upper and lower bound
- Big Omega has lower bound
- Big Oh (Omnicron) has upper bound

* Recursive Complexity

1. Take the base case
2. Take other cases
3. Expand and solve

** Simple Case

How many times is the function $f()$ run?

#+BEGIN_SRC python
  def r(n):
    f()
    if n == 1:
      return 5
    else:
      return r(n-1)
#+END_SRC

#+BEGIN_LaTeX
  \[ T(n) = 
  \begin{cases}
  1 & n = 1 \\
  1 + T(n-1) & else \\
  \end{cases}
  \]

  \begin{align}
    T(n) &= 1 + T(n-1) \\
    &= 1 + 1 + T(n-2) \\
    &= 1 + 1 + 1 + T(n-3) \\
    &= 1 + 1 + 1 + 1 + T(n-4) \\
    &= 1 + 1 + 1 + 1 + ... + 1 \\
    &= n
  \end{align}
#+END_LaTeX

** More Complex Case

How many times is the function $f()$ run?

#+BEGIN_SRC python
  def r(n):
    f()
    if n == 1:
      return 5
    else:
      return r(n/2)
#+END_SRC

#+BEGIN_LaTeX
  \[ T(n) = 
  \begin{cases}
  1 & n = 1 \\
  1 + T(n/2) & else \\
  \end{cases}
  \]

  \begin{align}
    T(n) &= 1 + T(n/2) \\
    &= 1 + (1 + T(n/4)) \\
    &= 1 + (1 + (1 + T(n/8))) \\
    &= 1 + \log_2 n
  \end{align}
#+END_LaTeX

* prove 2n^3 - n^2 + n -2 \in \Theta(n^3)

Claim: there is a C_1, C_2, n_0 such that $C_1 n^3 <= 2n^3 - n^2 + n
-2<= C_2 n^3 \forall n >= n_0$

C_1 = 1, C_2 = 3, n_0 = 2

* Analyze the function

#+BEGIN_SRC python
  def mystery(n):
      t = 0
      for i in range(1, n+1):
          s = 1
          for j in range(1, n+1):
              s = s * j
          t = t + s
      return t
#+END_SRC

** What does it do?

The sum of all factorials from 0 to n.

- The inner loop computes factorials
- The outer loop sums those factorials

** Runtime

#+BEGIN_LaTeX
  \begin{align}
    T(n) &= 1 + \sum_{i=1}^{n}(2 + \sum_{j=1}^{n} 1) \\
    &= 1 + \sum_{i=1}^{n} (2+n) \\
    &= 1 + n(2+n) \\
    &= n^2 + 2n + 1 \\
    &\in \Theta(n^2)
  \end{align}
#+END_LaTeX

* Lecture 5

Mostly we talked about HW-1 today. See hw1.org.

** Problem

Given an increasing function $f(x)$, defined for non-negative x, and a
number $T$, find a number $z \in [0,\infinity]$, such that $f(z) =
T$. $f$ is expensive.

#+BEGIN_SRC python :session lec5
  def find_z(f, T):
      z = 1
      
      return z
#+END_SRC
