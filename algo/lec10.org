#+TITLE: CSE 361 Lecture 10
#+OPTIONS: toc:nil
#+LATEX_HEADER: \usepackage{geometry,listings,amsmath,amssymb,amsthm}
#+LATEX_CLASS_OPTIONS: [12pt]
#+STARTUP: showall

* Maximum product of 3 elements of an array

#+BEGIN_SRC python :session lec10
  def prod_3_max(a):
      n = len(a)
      if n > 2:
          m = a[0] * a[1] * a[2]
          idx = (0,1,2)
          for i in range(n):
              for j in range(i+1, n):
                  for k in range(j+1,n):
                      if m < a[i] * a[j] * a[k]:
                          m = max(m, a[i] * a[j] * a[k])
                          idx = (i,j,k)
      return m, idx

  prod_3_max([1,45,23,52,31,31,13])
#+END_SRC

#+RESULTS:
| 72540 | (1 3 4) |

* Graph Algorithms

A graph is a tuple G = (V,E) where:

- V is the set of vertices
- E is the set of edges
- vertices == nodes
- edges are known as arcs when directed

They are typically stored as:

- linked list
- adjacency matrix
- incidence matrix

** Breadth first search

#+BEGIN_SRC python
  def bfs(G, r):
      enqueue(r)
      visited[r] = True
      while v = dequeue():
          for u in neighbors(G,v):
              if not visited[u]:
                  enqueue(u)
                  visited[u] = True

#+END_SRC

Potential hw, return number of connected components.

find connected components
shortest path in unweighted graph
testing for bipartite property
cuthill-mckee

** Depth first search

#+BEGIN_SRC python
  def dfs(G, r):
      if not r.visited:
          r.visited = True
      for e in neighbors(G,r):
          dfs(G,e)
#+END_SRC
