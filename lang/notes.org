* eqv? vs equal?

- equal? returns true if the elements are the same
- eqv? returns true if the elements are the same object in memory

#+BEGIN_SRC scheme
  (define a (range 2 5))
  (define b (range 2 5))
  (list (equal? a b)
        (eqv? a b))

#+END_SRC

* tail recursion

** Factorial

** List Reversal

** Zip

*** Normal Recursive

#+BEGIN_SRC scheme
  (define (zip l1 l2)
    (cond
     ((or (null? l1) (null? l2))
      '())
     (else
      (cons
       (list (car l1) (car l2))
       (zip (cdr l1) (cdr l2))))))

  (zip '(3 4 2) '(9 2))
#+END_SRC

#+RESULTS:
| 3 | 9 |
| 4 | 2 |

*** Tail Recursive

#+BEGIN_SRC scheme
  (define (zip l1 l2 acc)
    (cond
     ((or (null? l1) (null? l2))
      ; accumulator list is built in reverse
      (reverse acc)) 
     (else
      (zip
       (cdr l1)
       (cdr l2)
       (cons
        (list (car l1) (car l2))
        acc)))))

  (zip '(3 4 2) '(9 2 9) '())

#+END_SRC

#+RESULTS:
| 3 | 9 |
| 4 | 2 |
| 2 | 9 |

* map

- map a function onto a list (map f lst)
- map a function onto a list with 1 argument per call (map f lst args)

#+BEGIN_SRC scheme
  (map + '(1 2 3) '(1 2 3))
#+END_SRC

#+RESULTS:
| 2 | 4 | 6 |

#+BEGIN_SRC scheme
  ; only works on lists of equal length
  (define (zip l1 l2)
    (map list l1 l2))

  (zip '(1 2 3) '(4 5 6))

#+END_SRC

#+RESULTS:
| 1 | 4 |
| 2 | 5 |
| 3 | 6 |


* fold

#+BEGIN_SRC scheme
  (foldl string-append "" '("a" "b" "c") '("x" "y" "z"))
#+END_SRC

#+RESULTS:
: czbyax

#+BEGIN_SRC scheme
  (define (op-op-between f1 f2 a b def)
    (foldl f1 def (map f2 (range a (add1 b)))))
  "sum of squares"
  (op-op-between + (lambda (x) (* x x)) 1 3 0)
  "sum of cubes"
  (op-op-between + (lambda (x) (* x x x)) 1 3 0)
  (op-op-between * (lambda (x) (* x x)) 1 3 1)
  (op-op-between * (lambda (x) (* x x x)) 1 3 1)
#+END_SRC

#+RESULTS:
: 216

